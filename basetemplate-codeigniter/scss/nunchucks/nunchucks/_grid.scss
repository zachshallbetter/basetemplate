// Le Grid - From Foundation - http://foundation.zurb.com/docs/components/grid.html
//

// You have access to a grid mixins that will let you layout the page without 
// using presentational classes that you don't want. You can create your own set 
// of classes or even create your own grid. Setting '$include-html-grid-classes' to 'false' 
// will leave off those styles, giving you lots of control over your CSS output. 
// Here's an example structure you might use with the grid mixin:

// // Mixin options creating rows
// @include grid-row($behavior);

// The default value is false, which will bring in the default row styles
// $behavior: false

// If the element you are creating as a row is nested within another element
// that is also a row, you need to add the proper nesting styles
// $behavior: nest

// You can use this option to collapse the container row margins
// This comes in handy when working with forms inside the grid
// $behavior: collapse

// //If you have a nested row and want it to be collapsed, you need to add this option
// $behavior: nest-collapse



// Mixin options creating columns, these must be nested inside or a row 
// @include grid-column($columns, $last-column, $center, $offset, $push, $pull, $collapse, $float);

// The most commonly used option with a column 
// This sets the width properties for the column, use a number to represent columns 
// $columns: #

// Use this option if your columns do not add up to 12. 
// We make the last column default to float:right to keep things aligned 
// If you do not want this, set $last-column to true 
// $last-column: false

// If you have a single column inside a row and want it centered, set this to true 
// $center: false

// Control how many columns you offset by switching this into a number. 
// $offset: false

// You can use source ordering with this mixin too, just set this to a number. 
// $push: false

// You can use source ordering with this mixin too, just set this to a number. 
// $pull: false

// If you have a collapsed row, you need to set the columns to collapse as well. 
// $collapse: false

// By default, we do not include floats in the styles because it will be duplicated a lot. 
// To help control this, we made it an option. Set this to true to get columns to float. 
// $float: false


// Below is an example:

// #masthead 
// { 
//   @include grid-row; @include panel;
  
//   & > hgroup 
//   { 
//     @include grid-column(4, $float:left); 
//   }
  
//   & > section 
//   { 
//     @include grid-column(8, $float:left); 
//   }
// }

/////////////////////////////////////////////////////////////////////////////////////////


// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
@function emCalc($pxWidth) {
  @return $pxWidth / $em-base * 1em;
}

// Grid Calculation for Percentages
@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

// Grid Variables
//
$em-base:       16px !default;
$row-width:     emCalc(1000px) !default;
$column-gutter: emCalc(30px) !default;
$total-columns: 12 !default;
$include-html-grid-classes: true !default; // This by default kicks out the grid classes to be used in your HTML. 

$default-float: left !default;
$default-opposite: right !default;

// Media Queries
$small-screen: emCalc(768px) !default;
$medium-screen: emCalc(1280px) !default;
$large-screen: emCalc(1440px) !default;

$screen: "only screen" !default;
$small: "only screen and (min-width:"#{$small-screen}")" !default;
$medium: "only screen and (min-width:"#{$medium-screen}")" !default;
$large: "only screen and (min-width:"#{$large-screen}")" !default;
$landscape: "only screen and (orientation: landscape)" !default;
$portrait: "only screen and (orientation: portrait)" !default;

//
// Grid Mixins
//

// For creating container, nested, and collapsed rows.
@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-left: -($column-gutter/2);
    margin-right: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }

  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }

  // Clearfix for all rows
  @include clearfix();

}


// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:false) {

  position: relative;

  // Gutter padding whenever a column isn't set to collapse
  @if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  // If a column number is given, calculate width
  @if $columns {
    width: gridCalc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column { float: $default-opposite; }

    // if collapsed, get rid of gutter padding
    @else if $collapse { padding-left: 0; padding-right: 0; }

  }

  @if $collapse { padding-left: 0; padding-right: 0; }

  // If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }

  // Source Ordering, adds left/right depending on which you use.
  @if $push { #{$default-float}: gridCalc($push, $total-columns); #{$default-opposite}: auto; }
  @if $pull { #{$default-opposite}: gridCalc($pull, $total-columns); #{$default-float}: auto; }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-left: auto;
    margin-right: auto;
  }

  @if $float {
    @if $float == left { float: $default-float; }
    @else if $float == right { float: $default-opposite; }
    @else { float: none; }
  }

}


/* Grid HTML Classes */
@if $include-html-grid-classes {

  .row {
    @include grid-row;

    .column,
    .columns { @include grid-column($columns:$total-columns); }

    &.collapse {
      .column,
      .columns { @include grid-column($collapse:true); }
    }

    .row { @include grid-row($behavior:nest);
      &.collapse { @include grid-row($behavior:nest-collapse); }
    }
  }

  @media only screen {

    .row .column,
    .row .columns { @include grid-column($columns:false, $float:left); }

    @for $i from 1 through $total-columns {
      .row .small#{-$i} { @include grid-column($columns:$i,$collapse:null); }
    }

    @for $i from 1 through $total-columns - 2 {
      .row .small-offset-#{$i} { @include grid-column($offset:$i, $collapse:null); }
    }

    [class*="column"] + [class*="column"]:last-child { float: $default-opposite; }
    [class*="column"] + [class*="column"].end { float: $default-float; }

    .column.small-centered,
    .columns.small-centered { @include grid-column($center:true, $collapse:null, $float:none); }
  }

  /* Styles for screens that are atleast 768px; */
  @media #{$small} {

    @for $i from 1 through $total-columns {
      .row .large#{-$i} { @include grid-column($columns:$i,$collapse:null); }
    }

    @for $i from 1 through $total-columns - 2 {
      .row .large-offset-#{$i} { @include grid-column($offset:$i, $collapse:null); }
    }

    @for $i from 2 through $total-columns - 2 {
      .push#{-$i} { @include grid-column($push:$i, $collapse:null); }
      .pull#{-$i} { @include grid-column($pull:$i, $collapse:null); }
    }

    @for $i from 2 through $total-columns - 2 {
      .small-push#{-$i} { left: inherit; }
      .small-pull#{-$i} { right: inherit; }
    }

    .column.large-centered,
    .columns.large-centered { @include grid-column($center:true, $collapse:null, $float:none); }

  }

}